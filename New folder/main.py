import telebot
from telebot import types

token = ''
shopId =506751

shopArticleId =538350
bot = telebot.TeleBot(token)

menu_items = {
    "–†–∞—Ñ—Ñ –†–∞–∑–Ω—ã–π": {
        "ingredients": ["–≠—Å–ø—Ä–µ—Å—Å–æ", "–í–∑–±–∏—Ç—ã–µ —Å–ª–∏–≤–∫–∏", "–°–∏—Ä–æ–ø"],
        "size": {"STD": 200, "MDL": 260, "BIG": 280}
    },
    "–†–∞—Ñ—Ñ –ê—Ä–∞—Ö–∏—Å–æ–≤—ã–π": {
        "ingredients": ["–≠—Å–ø—Ä–µ—Å—Å–æ", "–í–∑–±–∏—Ç—ã–µ —Å–ª–∏–≤–∫–∏", "–°–∏—Ä–æ–ø", "–ê—Ä–∞—Ö–∏—Å–æ–≤–∞—è –ø–∞—Å—Ç–∞"],
        "size": {"STD": 210, "MDL": 270, "BIG": 300}
    },
    "–ú–æ–∫–∫–∞—á–∏–Ω–æ": {
        "ingredients": ["–≠—Å–ø—Ä–µ—Å—Å–æ", "–í–∑–±–∏—Ç–æ–µ –º–æ–ª–æ–∫–æ", "–ö–∞–∫–∞–æ"],
        "size": {"MDL": 240, "BIG": 270}
    },
    "–ì–æ—Ä—è—á–∏–π –®–æ–∫–æ–ª–∞–¥": {
        "ingredients": ["–í–∑–±–∏—Ç–æ–µ –º–æ–ª–æ–∫–æ", "–ö–∞–∫–∞–æ"],
        "size": {"MDL": 140, "BIG": 240}

    },
    "–ö–∞–∫–∞–æ": {
        "ingredients": ["–í–∑–±–∏—Ç–æ–µ –º–æ–ª–æ–∫–æ", "–ö–∞–∫–∞–æ"],
        "size": {"STD": 170, "MDL": 200, "BIG": 250}
    },

    "–õ–∞—Ç—Ç–µ –ú–∞—Ç—á–∞": {
        "ingredients": ["–º–æ–ª–æ–∫–æ", "–ú–∞—Ç—á–∞", "–°–∏—Ä–æ–ø"],
        "size": {"STD": 170, "MDL": 210, "BIG": 240}
    },
    "–ß–∞–π –Ø–≥–æ–¥–Ω—ã–π": {
        "ingredients": ["–ú—è—Ç–∞", "–ë—Ä—É—Å–Ω–∏–∫–∞", "–ß—ë—Ä–Ω—ã–π —á–∞–π", ],
        "size": {"BIG": 220}
    },
    "–ë—ç–±–∏—á–∏–Ω–æ": {
        "ingredients": ["–í—Å–ø–µ–Ω–µ–Ω–æ–µ –º–æ–ª–æ–∫–æ", "–°–∏—Ä–æ–ø"],
        "size": {"STD": 110, "MDL": 160, "BIG": 190}
    },
    "–ß–∞–π –ê–ø–µ–ª—å—Å–∏–Ω–æ–≤—ã–π": {
        "ingredients": ["–ê–ø–µ–ª—å—Å–∏–Ω—ã + –õ–µ–º–æ–Ω", "–ß—ë—Ä–Ω—ã–π —á–∞–π", "–ê–ø–µ–ª—å—Å–∏–Ω–æ–≤—ã–π —Å–æ–∫"],
        "size": {"BIG": 220}
    },
    "–ß–∞–π –û–±–ª–µ–ø–∏—Ö–æ–≤—ã–π": {
        "ingredients": ["–ß—ë—Ä–Ω—ã–π —á–∞–π", "–û–±–ª–µ–ø–∏—Ö–∞", "–õ–µ–º–æ–Ω"],
        "size": {"BIG": 220}
    },
    "–ß–∞–π–Ω–∏–∫": {
        "ingredients": ["–ß–∞–π", "–í–æ–¥–∞"],
        "size": {"BIG": 130, "600 –º–ª": 190}
    }

    # Add the rest of the menu items in a similar format
}

menu_items2 = {
    "–ë–∞–º–±–ª": {
        "ingredients": ["–≠—Å–ø—Ä–µ—Å—Å–æ", "–°–æ–∫", "–°–∏—Ä–æ–ø"],
        "size": {"MDL": 240, "BIG": 290}
    },
    "–≠—Å–ø—Ä–µ—Å—Å–æ-—Ç–æ–Ω–∏–∫/–ö–æ–ª–∞": {
        "ingredients": ["–≠—Å–ø—Ä–µ—Å—Å–æ", "–¢–æ–Ω–∏–∫/–ö–æ–ª–∞"],
        "size": {"MDL": 230, "BIG": 260}
    },
    "–§—Ä–∞–ø–ø—É—á–∏–Ω–æ": {
        "ingredients": ["–≠—Å–ø—Ä–µ—Å—Å–æ", "–í–∑–±–∏—Ç—ã–µ —Å–ª–∏–≤–∫–∏", "–í–∑–±–∏—Ç—ã–µ –ú–æ–ª–æ–∫–æ", "–°–∏—Ä–æ–ø"],
        "size": {"MDL": 230, "BIG": 270}
    },
    "Ice Latte": {
        "ingredients": ["–≠—Å–ø—Ä–µ—Å—Å–æ", "–ú–æ–ª–æ–∫–æ"],
        "size": {"STD": 150, "MDL": 190, "BIG": 230}
    },
    "–°–º—É–∑–∏ –º—è—Ç–Ω–æ-–±–∞–Ω–∞–Ω–æ–≤—ã–π": {
        "ingredients": ["–°–æ–∫", "–ë–∞–Ω–∞–Ω", "–°–∏—Ä–æ–ø"],
        "size": {"BIG": 260}
    },
    "–°–º—É–∑–∏ –æ–±–ª–µ—á–µ–Ω–∫–æ–≤—ã–π": {
        "ingredients": ["–ú–æ—Ä–æ–∂–µ–Ω–æ–µ", "–û–±–ª–µ–ø–∏—Ö–∞", "–ë–∞–Ω–∞–Ω", "–°–æ–∫"],
        "size": {"BIG": 260}
    },
    "–°–º—É–∑–∏ —Å–º–æ—Ä–æ–¥–∏–Ω–æ–≤—ã–π": {
        "ingredients": ["–ú–æ—Ä–æ–∂–µ–Ω–æ–µ", "–°–æ–∫", "–ë–∞–Ω–∞–Ω", "–û–±–ª–µ–ø–∏—Ö–∞"],
        "size": {"BIG": 260}
    },
    "–ü—å—è–Ω—ã–π A–Ω–≥–µ–ª": {
        "ingredients": ["–ú–æ—Ä–æ–∂–µ–Ω–æ–µ", "–°–∏—Ä–æ–ø", "–ú–æ–ª–æ–∫–æ", "–≠—Å–ø—Ä–µ—Å—Å–æ"],
        "size": {"MDL": 250, "BIG": 310}
    },
    "–ú–æ–ª–æ—á–Ω—ã–π –∫–æ–∫—Ç–µ–π–ª—å –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π": {
        "ingredients": ["Ÿã–®–∞—Ä–∏–∫ –ú–æ—Ä–æ–∂–µ–Ω–æ–µ", "–ú–æ–ª–æ–∫–æ"],
        "size": {"BIG": 260}
    },
    "–ú–æ–ª–æ—á–Ω—ã–π –∫–æ–∫—Ç–µ–π–ª—å –ù—ç—Å–∫–≤–∏–∫": {
        "ingredients": ["–°–ª–∏–≤–∫–∏", "–ú–æ—Ä–æ–∂–µ–Ω–æ–µ", "–ö–∞–∫–∞–æ", "–ú–æ–ª–æ–∫–æ"],
        "size": {"BIG": 260}
    },
    "–ú–æ–ª–æ—á–Ω—ã–π –∫–æ–∫—Ç–µ–π–ª—å Bubble Gum": {
        "ingredients": ["–°–ª–∏–≤–∫–∏", "–ú–æ—Ä–æ–∂–µ–Ω–æ–µ", "–ú–æ–ª–æ–∫–æ", "–°–∏—Ä–æ–ø"],
        "size": {"BIG": 260}
    },
    "–ö–∞–∑–∞–Ω–æ–≤–∞": {
        "ingredients": ["–ú–æ—Ä–æ–∂–µ–Ω–æ–µ", "–ë–∞–Ω–∞–Ω", "–ú–æ–ª–æ–∫–æ", "–≠—Å–ø—Ä–µ—Å—Å–æ", ],
        "size": {"BIG": 320}
    }  # ,
    # "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ": {
    #     "–õ—é–±–æ–π –Ω–∞–ø–∏—Ç–æ–∫ –Ω–∞ —Ä–∞—Å—Ç–∏—Ç–µ–ª—å–Ω–æ–º –º–æ–ª–æ–∫–µ": 60,
    #     "–ú–æ–ª–æ–∫–æ": 30,
    #     "–í–∑–±–∏—Ç—ã–µ —Å–ª–∏–≤–∫–∏": 40,
    #     "–°–∏—Ä–æ–ø": 35,
    #     "–ú–∞—Ä—à–º–µ–ª–ª–æ—É": 30,
    #     "–ú—ë–¥": 30
    # }
}

menu_items3 = {
    "–ê–º–µ—Ä–∏–∫–∞–Ω–æ": {
        "ingredients": ["–í–æ–¥–∞", "–≠—Å–ø—Ä–µ—Å—Å–æ"],
        "size": {"STD": 130, "MDL": 170, "BIG": 200}
    },
    "–Ø–ø–æ–Ω—á–∏–∫": {
        "ingredients": ["–í–æ–¥–∞", "–≠—Å–ø—Ä–µ—Å—Å–æ"],
        "size": {"MDL": 140}
    },
    "–§–ª—ç—Ç –£–∞–π—Ç": {
        "ingredients": ["–ú–æ–ª–æ—á–Ω–∞—è –ø–µ–Ω–∞", "–í—Å–ø–µ–Ω–µ–Ω–æ–µ –º–æ–ª–æ–∫–æ", "–≠—Å–ø—Ä–µ—Å—Å–æ"],
        "size": {"STD": 170, "MDL": 220, "BIG": 250}
    },
    "–õ–∞—Ç—Ç–µ": {
        "ingredients": ["–ú–æ–ª–æ—á–Ω–∞—è –ø–µ–Ω–∞", "–í—Å–ø–µ–Ω–µ–Ω–æ–µ –º–æ–ª–æ–∫–æ", "–≠—Å–ø—Ä–µ—Å—Å–æ"],
        "size": {"STD": 150, "MDL": 190, "BIG": 230}
    },
    "–ö–∞–ø—É—á–∏–Ω–æ": {
        "ingredients": ["–ú–æ–ª–æ—á–Ω–∞—è –ø–µ–Ω–∞", "–í—Å–ø–µ–Ω–µ–Ω–æ–µ –º–æ–ª–æ–∫–æ", "–≠—Å–ø—Ä–µ—Å—Å–æ"],
        "size": {"STD": 150, "MDL": 190, "BIG": 230}
    },
    "–†–∞–¥ –ö–∞—à–∞": {
        "ingredients": ["–í—Å–ø–µ–Ω–µ–Ω–æ–µ –º–æ–ª–æ–∫–æ", "–•–ª–æ–ø—å—è"],
        "size": {"STD": 120}
    },
    "–†–∞–¥ –ö–∞—à–∞, –Ø–≥–æ–¥–Ω–∞—è": {
        "ingredients": ["–í—Å–ø–µ–Ω–µ–Ω–æ–µ –º–æ–ª–æ–∫–æ", "–°–º–æ—Ä–æ–¥–∏–Ω–∞/–ë—Ä—É—Å–Ω–∏–∫–∞", "–•–ª–æ–ø—å—è"],
        "size": {"STD": 150}
    },
    "–ì—Ä–∞–Ω–æ–ª–∞": {
        "ingredients": ["–ú–æ–ª–æ–∫–æ", "–û—Ä–µ—Ö–∏ + –¶—É–∫–∞—Ç—ã", "–ú—ë–¥"],
        "size": {"MDL": 120}
    }
}


@bot.message_handler(commands=['start'])
def start_message(message):
    buttons = types.InlineKeyboardMarkup(row_width=1)

    button_hello = types.InlineKeyboardButton("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="hello")
    # button_bye = types.InlineKeyboardButton("–ú–µ–Ω—é –Ω–∞–ø–∏—Ç–∫–æ–≤, –µ–¥—ã, –¥–µ—Å–µ—Ä—Ç–æ–≤", callback_data="bye")
    button_cat = types.InlineKeyboardButton("–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞", callback_data="cat")
    button_stats = types.InlineKeyboardButton("–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞", callback_data="stats")
    button_stats2 = types.InlineKeyboardButton("–ê–∫—Ü–∏–∏ –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è", callback_data="offers")
    button_stats3 = types.InlineKeyboardButton("–ö–æ–Ω—Ç–∞–∫—Ç—ã –∏ –ª–æ–∫–∞—Ü–∏—è", callback_data="contacts")
    button_stats4 = types.InlineKeyboardButton("–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å", callback_data="link")

    buttons.add(button_hello, button_cat, button_stats, button_stats2, button_stats3, button_stats4)

    bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç ‚úåÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –∫–æ–º–∞–Ω–¥—É:", reply_markup=buttons)


@bot.callback_query_handler(func=lambda call: True)
def handle_button_click(call):
    if call.data == "hello":
        bot.send_message(call.message.chat.id, "–í–æ—Ç –Ω–∞—à–µ –º–µ–Ω—é üòã")
        bot.send_photo(call.message.chat.id, "https://freeimage.host/i/dV8A0Pt")
        bot.send_photo(call.message.chat.id, "https://freeimage.host/i/dVSJ8GV")
        bot.send_photo(call.message.chat.id, "https://freeimage.host/i/dVSJGG2")
        bot.send_photo(call.message.chat.id, "https://freeimage.host/i/dVSJNTb")


    elif call.data == "bye":
        bot.send_message(call.message.chat.id, "¬°drinks minu!!!!!!!!!!!!")
    elif call.data == "cat":
        bot.send_message(call.message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞–∫–∞–∑–∞:")
        buttons = types.InlineKeyboardMarkup(row_width=1)

        button_cold = types.InlineKeyboardButton("–•–æ–ª–æ–¥–Ω—ã–π", callback_data="cold")
        button_piece = types.InlineKeyboardButton("–®—Ç—É—á–Ω—ã–π", callback_data="piece")
        button_sweet = types.InlineKeyboardButton("–°–ª–∞–¥–∫–∏–π", callback_data="sweet")
        buttons.add(button_cold, button_piece, button_sweet)

        bot.send_message(call.message.chat.id, "–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–∫–∞–∑–∞—Ç—å", reply_markup=buttons)
    elif call.data == "cold":
        bot.send_message(call.message.chat.id, "–í—ã –≤—ã–±—Ä–∞–ª–∏ –•–æ–ª–æ–¥–Ω—ã–π –Ω–∞–ø–∏—Ç–æ–∫.")
        buttons = types.InlineKeyboardMarkup(row_width=1)

        for item_name in menu_items2:
            button = types.InlineKeyboardButton(item_name, callback_data=item_name)

            buttons.add(button)

        bot.send_message(call.message.chat.id, "–•–æ–ª–æ–¥–Ω—ã–π –Ω–∞–ø–∏—Ç–∫–∏:", reply_markup=buttons)


    elif call.data == "sweet":
        bot.send_message(call.message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø–∏—Ç–æ–∫:")
        buttons = types.InlineKeyboardMarkup(row_width=1)

        for item_name in menu_items:
            button = types.InlineKeyboardButton(item_name, callback_data=item_name)

            buttons.add(button)

        bot.send_message(call.message.chat.id, "–°–ª–∞–¥–∫–∏–µ –Ω–∞–ø–∏—Ç–∫–∏:", reply_markup=buttons)


    elif call.data == "piece":
        bot.send_message(call.message.chat.id, "–í—ã –≤—ã–±—Ä–∞–ª–∏ –®—Ç—É—á–Ω—ã–π –Ω–∞–ø–∏—Ç–æ–∫.")
        buttons = types.InlineKeyboardMarkup(row_width=1)

        for item_name in menu_items3:
            button = types.InlineKeyboardButton(item_name, callback_data=item_name)

            buttons.add(button)

        bot.send_message(call.message.chat.id, "–®—Ç—É—á–Ω—ã–π –Ω–∞–ø–∏—Ç–∫–∏:", reply_markup=buttons)

    elif call.data in menu_items:
        item = menu_items[call.data]
        ingredients = "\n".join(item["ingredients"])
        prices = "  ".join([f"{size} - {price}" for size, price in item["size"].items()])
        message = f"{call.data}\n–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã:\n{ingredients}\n—Ü–µ–Ω–∞:\n{prices}"
        bot.send_message(call.message.chat.id, message)
        display_payment_options(call.message, call.data)

    elif call.data in menu_items2:
        item = menu_items2[call.data]
        ingredients = "\n".join(item["ingredients"])
        prices = "  ".join([f"{size} - {price}" for size, price in item["size"].items()])
        message = f"{call.data}\n–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã:\n{ingredients}\n—Ü–µ–Ω–∞:\n{prices}"
        bot.send_message(call.message.chat.id, message)
        display_payment_options2(call.message, call.data)


    elif call.data in menu_items3:
        item = menu_items3[call.data]
        ingredients = "\n".join(item["ingredients"])
        prices = " , ".join([f"{size} - {price}" for size, price in item["size"].items()])
        message = f"{call.data}\n–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã:\n{ingredients}\n—Ü–µ–Ω–∞:\n{prices}"
        bot.send_message(call.message.chat.id, message)
        display_payment_options3(call.message, call.data)


    elif call.data == "stats":
        bot.send_message(call.message.chat.id, "–°–µ–π—á–∞—Å –º—ã –ø—Ä–æ–≤–µ—Ä–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤–∞—à–µ–≥–æ –∑–∞–∫–∞–∑–∞")

    elif call.data == "offers":
        bot.send_message(call.message.chat.id, "—Å–µ–≥–æ–¥–Ω—è —É –Ω–∞—Å —Å–∫–∏–¥–∫–∞ 20% ü§ë")
    elif call.data == "contacts":
        bot.send_message(call.message.chat.id,
                         "–í–æ—Ç –Ω–∞—à –Ω–æ–º–µ—Ä: +7 (904) 054-37-57,\n our vk:https://vk.com/coffeestar_gagarin \n our insta: ")
    elif call.data == "link":
        bot.send_message(call.message.chat.id, "comments")


    elif call.data.startswith("pay_"):
            data_parts = call.data.split("_")
            item_name = data_parts[1] if len(data_parts) > 1 else None
            size = data_parts[2] if len(data_parts) > 2 else None
            print(1)
            print(data_parts)
           
            if item_name in menu_items and size in menu_items[item_name]["size"]:
                print(2)
                amount = menu_items[item_name]["size"][size]
                bot.reply_to(call.message, f"Payment processed for {item_name} - {size}. Amount: {amount}")
            elif  item_name in menu_items2 and size in menu_items2[item_name]["size"]:
                print(3)
                amount = menu_items2[item_name]["size"][size]
                bot.reply_to(call.message, f"Payment processed for {item_name} - {size}. Amount: {amount}")

            elif item_name in menu_items3 and size in menu_items3[item_name]["size"]:
                amount = menu_items3[item_name]["size"][size]
                bot.reply_to(call.message, f"Payment processed for {item_name} - {size}. Amount: {amount}")
                print(4)
            else:    
                print(5)
                print(data_parts)
                bot.reply_to(call.message, "Error: Amount not found.")
                
    # elif call.data.startswith("pay_"):
    #     data_parts = call.data.split("_")
    #     item_name2 = data_parts[1] if len(data_parts) > 1 else None
    #     size = data_parts[2] if len(data_parts) > 2 else None
    #     print(20)
    #     print(data_parts,item_name2)
        
    #     if item_name in menu_items2 and size in menu_items2[item_name2]["size"]:
    #         amount = menu_items2[item_name2]["size"][size]
    #         bot.reply_to(call.message, f"Payment processed for {item_name2} - {size}. Amount: {amount}")
        # else:
        #     print(30)
        #     print(data_parts,item_name2)
        #     bot.reply_to(call.message, "Error: Amount not found.")
    # elif call.data.startswith("pay:"):
    #     data_parts = call.data.split(":")
    #     item_name = data_parts[1]
    #     size = data_parts[2]
    #     amount = menu_items3.get(item_name, {}).get("size", {}).get(size)

    #     # Implement payment logic here
    #     bot.reply_to(call.message, f"Payment processed for {item_name} - {size}. Amount: {amount}")
    # else:
    #       print(f"Unknown callback data: {call.data}")
    
    
def display_payment_options(message, item_name):
    item = menu_items.get(item_name)
    if item:
        prices = item["size"]
        markup = types.InlineKeyboardMarkup()
        for size, price in prices.items():
            button_text = f"Pay {size} - {price}"      
            callback_data = f"pay_{item_name}_{size}"
            markup.add(types.InlineKeyboardButton(button_text, callback_data=callback_data))
        bot.send_message(message.chat.id, "Select a size to pay:", reply_markup=markup)

    else:
        bot.send_message(message.chat.id, "Item not found.")


def display_payment_options2(message, item_name2):
    item = menu_items2.get(item_name2)
    if item:
        prices = item["size"]
        markup = types.InlineKeyboardMarkup()
        for size, price in prices.items():
            button_text = f"Pay {size} - {price}"
            callback_data = f"pay_{item_name2}_{size}"
            markup.add(types.InlineKeyboardButton(button_text, callback_data=callback_data))
        bot.send_message(message.chat.id, "Select a size to pay:", reply_markup=markup)
    else:
        bot.send_message(message.chat.id, "Item not found.") 
def display_payment_options3(message, item_name3):
    item3 = menu_items3.get(item_name3)
    if item3:
        prices = item3["size"]
        markup = types.InlineKeyboardMarkup()
        for size, price in prices.items():
            button_text = f"Pay {size} - {price}"
            callback_data = f"pay_{item_name3}_{size}"
            markup.add(types.InlineKeyboardButton(button_text, callback_data=callback_data))
        bot.send_message(message.chat.id, "Select a size to pay:", reply_markup=markup)

    else:
        bot.send_message(message.chat.id, "Item not found.")



bot.polling()
